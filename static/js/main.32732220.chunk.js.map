{"version":3,"sources":["Stories.js","Search.js","History.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Stories","storyArr","map","story","url","className","href","target","rel","title","author","created_at","slice","uuidv4","Search","initialGETURL","query","useParams","useState","searchValue","setSearchValue","searchHistory","setSearchHistory","stories","setStories","debounceHandler","useRef","getStories","searchTerm","a","axios","get","searchRes","data","hits","Error","response","useEffect","lastSearched","length","clearTimeout","current","setTimeout","prevState","Set","storedHistory","window","localStorage","getItem","storedHistoryArr","split","setItem","placeholder","value","onChange","evt","History","storedSearchQueries","searchArr","search","to","activeClassName","Nav","pathname","useLocation","isActive","includes","exact","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32732220.chunk.js","sourcesContent":["import React from \"react\";\nimport {v4 as uuidv4} from 'uuid';\n\nconst Stories = ({storyArr}) => {\n\n\nreturn (\n\n    <>\n        <ul>\n        {storyArr.map((story) => {\n            if (story.url) {\n\n            return  <li key={uuidv4()}>\n                        <div className='title-div'>\n                            <a href={story.url} target=\"_blank\" rel=\"noreferrer noopener\">{story.title}</a>\n                            <span className='author'> by {story.author}</span>\n                        </div>\n                        <div className='linkinfo-div'>\n                            <span>Posted: {story.created_at.slice(0,10)}</span>\n                        </div>\n                    </li>\n                    }\n            else {return null}   \n            })}\n            \n        </ul>\n       \n    </>\n\n\n)\n}\n\nexport default Stories;","import React, { useEffect, useState, useRef } from \"react\";\nimport axios from 'axios';\nimport Stories from \"./Stories\"\nimport { useParams} from \"react-router-dom\";\n\n\n\nconst Search = () => {\n\n\n    const initialGETURL = 'https://hn.algolia.com/api/v1/search_by_date?tags=story';\n\n    const {query} = useParams();\n    const [searchValue, setSearchValue] = useState(() => (query? query: ''));\n    const [searchHistory, setSearchHistory] = useState([]);\n    const [stories, setStories] = useState([]);\n   \n    let debounceHandler = useRef(null);\n\n\n    async function getStories(searchTerm) {\n       \n        if (searchTerm) {\n           \n            try {\n                const searchRes = await axios.get(`https://hn.algolia.com/api/v1/search?query=${searchTerm}&tags=story`)\n                setStories(searchRes.data.hits);\n            }\n            catch (e) {\n                throw new Error('API call did not work');\n            }\n        }\n        //below api call shows latest stories\n        else {\n            try {\n                const response = await axios.get(initialGETURL);\n                setStories(response.data.hits);\n            }\n            catch (e) {\n                throw new Error('API call did not work');\n            }\n        }\n    }\n\n\n    useEffect(() => {\n    \n        let lastSearched = searchHistory[searchHistory.length-1];\n        if (searchValue && searchValue !== lastSearched ) {\n          \n            clearTimeout(debounceHandler.current);\n            debounceHandler.current = setTimeout(() => {\n                getStories(searchValue);\n                setSearchHistory((prevState) => ([...new Set([searchValue, ...prevState])]));\n             \n            }, 400)\n        \n            return () => {\n                clearTimeout(debounceHandler);\n            }\n        }\n        \n        else {\n            getStories();\n        }\n\n    }, [searchValue, searchHistory])\n\n    useEffect(() => {\n\n        const storedHistory = window.localStorage.getItem('searches');\n        if (storedHistory){\n            const storedHistoryArr = storedHistory.split(',');\n            localStorage.setItem('searches', [...new Set([...searchHistory,...storedHistoryArr])]);\n        }\n        else {\n            localStorage.setItem('searches',[...new Set([...searchHistory])] )\n        }\n\n    }, [searchHistory])\n\n\n    return (\n\n        <>\n     \n        <div className='search-container'>\n            <input className='search-input' placeholder=' Looking for?' value={searchValue} onChange={(evt) => (setSearchValue(evt.target.value))}></input>\n            \n        </div>\n\n        <div className='stories-container'>\n           <Stories storyArr={stories}></Stories>\n        </div>\n        </>\n\n    )\n}\n\n\n\n\n\nexport default Search;","import React from \"react\";\nimport {v4 as uuidv4} from 'uuid';\nimport {NavLink} from 'react-router-dom';\n\n\n\nconst History = () => {\n\n    const storedSearchQueries = window.localStorage.getItem('searches');\n    const searchArr = storedSearchQueries? storedSearchQueries.split(',') : null;\n\n    if (searchArr) {\n        return (\n            <> \n              \n               <div className='searchhistory-container'>\n                    <ul>\n                    {searchArr.map((search) => (\n                    \n                        <li key={uuidv4()}>\n                        <div className='pastsearch-div'>\n                            <NavLink to={`search/${search}`} activeClassName={'active'}>{search}</NavLink>\n                        </div>\n                        </li>\n                    ))}\n                    </ul>\n                </div>\n            </>\n    \n        )\n\n\n    }\n\n    else {\n       \n        return (\n\n            <div>\n               \n                <div className='nohistorytext-container'>No History</div>\n            </div>\n        )\n    }\n    \n \n    \n    \n}\n\nexport default History;","import React from \"react\";\nimport {NavLink, useLocation} from 'react-router-dom';\n\nconst Nav = () => {\n\n\n    const {pathname} = useLocation();\n\n    return (\n        <nav className='nav'>\n            <div className='navlink-container'>\n            <NavLink className='navlink' isActive={() => (pathname.includes('/search') || pathname === '/' || pathname ==='/hackernews')} exact to='/search'>SEARCH</NavLink>\n            </div>\n            <div className='navlink-container'>\n            <NavLink className='navlink' exact to='/history'>HISTORY</NavLink>\n            </div>\n            \n\n        </nav>\n\n    )\n}\n\nexport default Nav;","\nimport './App.css';\nimport Search from './Search.js';\nimport History from './History';\nimport Nav from './Nav';\nimport {BrowserRouter, Redirect, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n        <Route path='/search/:query'>\n          <Search />\n        </Route>\n        <Route exact path='/search'>\n          <Search />\n        </Route>\n        <Route exact path='/history'>\n          <History />\n        </Route>\n        <Route exact path='/'>\n          <Redirect to=\"/search\" />\n        </Route>\n        <Search />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}